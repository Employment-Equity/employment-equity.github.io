---
format: html
editor: visual
---

::: {.content-visible when-profile="english"}
# Tables and Visualizations
:::

::: {.content-visible when-profile="french"}
# Tableaux et visualisations
:::

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = FALSE)


library(tidyverse)
library(rvest)
library(plotly)
library(flextable)
library(stringr)
library(MetBrewer)
library(data.table)
library(crosstalk)
library(conflicted)
library(here)

# Set session-wide pref for library conflicts
conflicts_prefer(dplyr::filter())
conflicts_prefer(dplyr::rename())
conflicts_prefer(dplyr::first())
```

```{r echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}

# Declare location of this script with here package
here::i_am("Visualizations.qmd")

# Load webscraping functions
source(here("functions/webscraping_fns.R"))

# Pull salary data for all years
lapply(years, get_salary_data)  |>
  bind_rows()


# list of name of databases by year
years_data_cat <- paste("salary_data",
                        years,
                        sep = "_") |>
  
  # Concat every year's data into one df
  mget() |>
  bind_rows(.id = "Year") |>
  
  # Make a year column 
  mutate(Year = str_extract(Year, "\\d{4}"))  |>
  
    # Merge any rows with "Total" in name by year
  mutate(salary_range = 
           ifelse(grepl('Total', 
                        salary_range), 
                  "Total", 
                  salary_range)) |>
  
  group_by(salary_range, Year) |>
  summarise_all(list(~ sum(., na.rm = TRUE))) 


# Imputation: add in imputed values to replace suppressed numbers 
imputation_data <- read.csv(here("supplementary_tables/imputation_estimates.csv"), encoding = "UTF-8") |> 
  mutate(salary_range =  str_replace_all(salary_range, "\\s", " "))


# Loop to impute numbers into df
for (i in 1:nrow(imputation_data)){
  # separate imputation date into groups
  imputation_data_black <- imputation_data |> 
    filter(Group == "count_black")
  imputation_data_indigenous <- imputation_data |> 
    filter(Group == "count_indigenous")
  imputation_data_vm <- imputation_data |> 
    filter(Group == "count_vm")
  # Use case_when to meet conditions from imputation data
  years_data_cat <- years_data_cat |> 
    mutate(old_val = count_black) |>
    mutate(count_black = case_when(
      Year == imputation_data_black$Year[i] & 
        salary_range == imputation_data_black$salary_range[i] ~  imputation_data_black$value[i], 
      .default = old_val
    )
    ) |>
    mutate(old_val = count_indigenous) |>
    mutate(count_indigenous = case_when(
      Year == imputation_data_indigenous$Year[i] & 
        salary_range == imputation_data_indigenous$salary_range[i] ~  imputation_data_indigenous$value[i], 
      .default = old_val
    )
    ) |>
    mutate(old_val = count_vm) |>
    mutate(count_vm = case_when(
      Year == imputation_data_vm$Year[i] & 
        salary_range == imputation_data_vm$salary_range[i] ~  imputation_data_vm$value[i], 
      .default = old_val
    )
    ) |>
    select(-c(old_val)) |>
    mutate(count_non_vm = count_all - count_vm) # calculate non vm (all - vm's)
}


# Fix 2022 data - collapse under 50K 
# 2022 data has both "Under 25K" and "Under 50K" salaries. Here we will collapse those two categories as well as the  "25K-49K" category into "Under 50K" for consistency 
years_data_clean <-
  years_data_cat |> mutate(salary_range = case_when(
    salary_range %in% c("Under 25,000",
                        "Under 50,000",
                        "25,000 to 49,999") ~ "Under 50,000",
    TRUE ~ salary_range
  )) |>
  group_by(salary_range, Year) |>
  summarise(
    count_all = sum(count_all, na.rm = TRUE),
    count_black = sum(count_black, na.rm = TRUE),
    count_vm = sum(count_vm, na.rm = TRUE),
    count_indigenous = sum(count_indigenous, na.rm = TRUE),
    count_pwd = sum(count_pwd, na.rm = TRUE), 
    count_non_vm = count_all - count_vm
  )

# Save intermediate data
write.csv(years_data_clean, here("intermediate_data/cleaned_imputed_salary_data.csv"))


# Clear workspace of unneeded df's and functions in saved memory
rm(list = ls()[startsWith(ls(), "salary_data_")], url, remove_bullish, remove_spaces)

# read in salary bin data
salary_bins <- read.csv(here("supplementary_tables/ee_dv_salarybins.csv"), fileEncoding = "UTF-8-BOM")

# df for renaming cols
median_colnames <- c("salary_range", 
                       "Year", 
                       "count_all", 
                       "count_black", 
                       "count_vm", 
                       "count_indigenous", 
                       "count_pwd", 
                       "count_non_vm",
                        "bin_width",
                       "bin_width_cumsum", 
                       "cumsum_all",
                       "cumsum_black",
                       "cumsum_vm",
                       "cumsum_indigenous",
                       "cumsum_pwd",
                       "cumsum_non_vm",
                       "half_pop_all",
                       "half_pop_black",
                       "half_pop_vm",
                       "half_pop_indigenous",
                       "half_pop_pwd",
                       "half_pop_non_vm")
  
# Create final datasets with cumulative frequencies and bins
df <-
  merge(
    x = years_data_clean, # read in yearly salary data by group
    y = { # match dataset to bin categories and widths from different years
          salary_bins
    },
    by.x = c("salary_range", "Year"),
    by.y = c("bins", "Year"),
    all.x = TRUE
  )  |> arrange( # arrange salary ranges from lowest to highest using factors
    Year,
    factor(
      salary_range,
      levels = c(
        "Under 15,000",
        "Under 25,000",
        "Under 50,000",
        "15,000 to 49,999",
        "25,000 to 49,999",
        "50,000 to 54,999",
        "55,000 to 59,999",
        "60,000 to 64,999",
        "65,000 to 69,999",
        "70,000 to 74,999",
        "75,000 to 79,999",
        "80,000 to 84,999",
        "85,000 to 89,999",
        "90,000 to 94,999",
        "95,000 to 99,999",
        "100,000 to 149,999",
        "100,000 to 104,999",
        "105,000 to 109,999",
        "110,000 to 114,999",
        "115,000 to 119,999",
        "120,000 to 124,999",
        "125,000 to 149,999",
        "150,000 to 199,999",
        "200,000 to 249,999",
        "100,000 and over",
        "150,000 and over",
        "250,000 and over",
        "Total"
      )
  )) |> 
  group_by(Year) |> # get cumulative frequencies with cumsum()
    mutate(
      cumsum_bin_width = cumsum(bin_width), 
      cumsum_all = cumsum(count_all),
      cumsum_black = cumsum(count_black),
      cumsum_vm = cumsum(count_vm),
      cumsum_indigenous = cumsum(count_indigenous),
      cumsum_pwd = cumsum(count_pwd),
      cumsum_non_vm = cumsum(count_non_vm)
    ) |> ungroup() |>
  pivot_longer( # change data to longform
    cols = c(starts_with("count"), starts_with("cumsum")),
    names_to = "group",
    values_to = "count_cumsum"
  ) |>
  group_by(Year, group) |> 
    mutate(total = ifelse((grepl(pattern = "count_", x = group) & salary_range == "Total"), count_cumsum, NA)) |> # if total, make cumsum NA
  fill(total, .direction = "up") |> 
  ungroup() |> 
  mutate(half_pop = total/2) |> # get half population per bin
  group_by(Year, group)

rm(imputation_data, imputation_data_black, imputation_data_indigenous, imputation_data_vm, temp, years_data_cat, end.time, start.time, time.taken)

```

```{r echo=FALSE, message=FALSE, include = FALSE, warning=FALSE}

# Median Calculations -----------------------------------------------------

# Pull in median calculating function 
source(here("functions/median_fns.R"))

# run across all years and groups
groups <- c("black", "vm", "indigenous", "pwd", "non_vm", "all")

# Create a df with all combinations of years and groups 
combinations <- expand.grid(year = years, 
                            ee_group = groups, 
                            stringsAsFactors = FALSE)

# Calculate all medians
median_df <- pmap(combinations, est_median) |> 
  bind_rows() |> 
    rename("year" = "med_year")

# Remove unneeded df's from memory
rm(list = ls()[startsWith(ls(), "median_df_2")])

```

```{r echo=FALSE, message=FALSE, warning=FALSE}

# Create function and apply to round to nearest $50
round_any <-  function(x, accuracy, f=round){f(x/ accuracy) * accuracy}

# Load file with labels 
labels <- read.csv(here("supplementary_tables/labels_en_fr.csv")) 

median_labels_en <- labels |> 
  filter(type == "median") |>
  select(en, variable) |> 
  with(setNames(variable, en))


# Swap to wide format for display
median_df_wide <- median_df |> 
  mutate(med = round_any(med, accuracy = 50)) |> 
  spread(group, med) |> 
  select(year, all, non_vm, vm, black, indigenous, pwd) |> 
  arrange(desc(year)) |> 
   rename(all_of(median_labels_en))

# Save median table
write.csv(median_df_wide, file = here("intermediate_data/medians.csv"))

```

::: {.content-visible when-profile="english"}
## Median Salary Table

```{r echo=FALSE, message=FALSE, warning=FALSE}

# Color matrix to color table
colors <- met.brewer("Hiroshige", 5)[c(1,4)]

# If bigger than all employees, make orange. If less, make blue
colormatrix <- ifelse(median_df_wide[, -(1:2)] > median_df_wide$`All Employees`, colors[1], colors[2])

# Make formatted median salary table
median_flextable <- flextable(median_df_wide) |>
  align(align = "center", part = "body") |>
  align(align = "center", part = "header") |> 
  valign(valign = "center", part = "header") |>
  color(j = 3:7, color = colormatrix) 

median_flextable

```

Median salaries (CDN per annum) of Canadian core public service employees from 2017-2024, rounded to the nearest \$50. Median salary was estimated with [Formula 1](https://employment-equity.github.io/DI.html#estimating-median-salary). Orange values indicate a higher value than the "all employees" group, and blue values indicate a lower value per year. Data from [Treasury Board of Canada Secretariat Diversity and Inclusion Statistics.](https://www.canada.ca/en/treasury-board-secretariat/services/innovation/human-resources-statistics/diversity-inclusion-statistics.html)
:::

::: {.content-visible when-profile="french"}
## Tableau des salaires médians

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Function for applying french formatting to numbers
fr_format <- function(cols) { 
  
 format(x = cols, 
        big.mark = ".", 
        scientific = FALSE, 
        trim = TRUE)

}

# Get french labels 
median_labels_fr <- labels |> 
  filter(type == "median") |>
  select(variable, fr) |> 
  with(setNames(fr, variable))

# Edits for french table
median_df_wide_fr <- median_df_wide |> 
  rename_with(~ median_labels_fr) |>  # french labels
  mutate_at(vars(!`Année`), fr_format)   # french formatting of numbers
  

# Make formatted table
flextable(median_df_wide_fr) |>
  align(align = "center", part = "body") |>
  align(align = "center", part = "header") |> 
  valign(valign = "center", part = "header") |>
  color(j = 3:7, color = colormatrix) 
```

Salaires médians (en dollars canadiens par an) des employés du noyau de la fonction publique canadienne de 2017 à 2024, arrondis aux 50 dollars les plus proches. Pour savoir comment le salaire médian a été calculé, veuillez consulter la page [Sur l'indice de disproportionnalité.](https://employment-equity.github.io/fr/DI.html) Les valeurs orange indiquent une valeur supérieure à celle du groupe "tous les salariés", et les valeurs bleues une valeur inférieure par an. Les données proviennent de [Secrétariat du Conseil du Trésor du Canada Statistiques sur la diversité et l'inclusion.](https://www.canada.ca/fr/secretariat-conseil-tresor/services/innovation/statistiques-ressources-humaines/statistiques-diversite-inclusion.html)
:::

:::: {.content-visible when-profile="english"}
## Disproportionality Tables

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Load in quintile ranges 
quintile_ranges <- read.csv(here("supplementary_tables/quintile_ranges.csv"))

# Bring in function for calculating DI
source(here("functions/di_fns.R"))

# Apply to all years
di_df <- lapply(years, get_di)  |>
  bind_rows()

# Write file
write.csv(di_df, file = here("intermediate_data/di.csv"))
```

::: panel-tabset
### 2024

```{r echo=FALSE, message=FALSE, warning=FALSE}

di_table_year("2024")

```

### 2023

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2023")
```

### 2022

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2022")
```

### 2021

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2021")
```

### 2020

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2020")
```

### 2019

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2019")
```

### 2018

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year("2018")
```

### 2017

```{r echo=FALSE, message=FALSE, warning=FALSE}

di_table_year("2017")
```
:::
::::

:::: {.content-visible when-profile="french"}
## Tableaux de disproportionnalité

::: panel-tabset
### 2024

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2024")
```

### 2023

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2023")
```

### 2022

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2022")
```

### 2021

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2021")
```

### 2019

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2019")
```

### 2018

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2018")
```

### 2017

```{r echo=FALSE, message=FALSE, warning=FALSE}
di_table_year_fr("2017")
```
:::
::::

```{r echo = FALSE, message=FALSE, warning=FALSE, include = FALSE}

# Establish factor level order for subgroups
subgroup_order <- labels |> 
  filter(type == "median") |> 
  filter(variable != c("year", "all")) |> 
  pull(en) 


# Convert DI df to long format for plotting 
di_df_long <- di_df |>  
  rename("Year" = "year_di") |> 
  pivot_longer(cols = matches(c("per", "di")),
                                     names_to = "temp", #unit of measurement
                                     values_to = "value") |> 
  separate(col = temp, sep = "_", 
           into = c("uom", "subgroup"),
           extra = "merge",
           fill = "left") |> 
  mutate(
               # separate into unit of measure
               uom = case_when(
                 grepl(pattern = "^per", x = as.character(uom)) ~ "Percent",
                 grepl(pattern = "^di", x = as.character(uom)) ~ "DI"
               )) |> 
  left_join(labels |>  filter(type == "median") |>  select(variable, en, fr),
            by = c("subgroup" = "variable")) |> 
  left_join(labels |> filter(type == "quintile_comparable") |> select(en, fr),
            by = c("quintile_label" = "en")) |> 
    rename("Salary range" = "range_label",
           "Salary percentile" = "quintile_label",
         "Subgroup" = "en",
         "Sous-groupe" = "fr.x", 
         "Percentile de salaire" = "fr.y") |> 
  filter(uom == "DI",
         subgroup != "all") |> 
  mutate(Subgroup = factor(Subgroup,
         levels = subgroup_order))


# Factor level for quintiles (specific to year)
quintile_order <- quintile_ranges |> 
  select(quintile_year, range_label) |> 
  group_by(quintile_year) |> 
  unique(fromLast = TRUE) |> 
  filter(range_label != "All ranges")

# recent year next few plots will deal with 
recent_year <- "2024"
```

::: {.content-visible when-profile="english"}
## Plot 1: DI of all groups by salary range (2024)

The dotted line represents equitable representation (a DI of 1). It can been seen that Black employees are overrepresented at the lower salary ranges and underrepresented at higher ranges compared to the other groups. As can be seen by the "Non-Visible Minority Employees" bars, an equal DI across all salary ranges should be expected.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 7.5}

# Establish quintile range orders
quintile_order_plot1 <- quintile_order |> 
  filter(quintile_year == recent_year) |> 
  pull(range_label)


# Grab  2024 data
plot1_df <-  di_df_long |> 
  filter(Year == recent_year & !is.na(`Salary range`)) |> 
  mutate(`Salary range` = factor(`Salary range`, 
                                 levels = quintile_order_plot1))

# Make a vector with corresponding colors
colors = met.brewer("Johnson", 5)

# Bar plot showing salary ranges by group
ggplot(plot1_df, aes(fill = Subgroup,
                            y = value,
                            x = `Salary range`)) +
  geom_bar(position = 'dodge',
           stat ='identity') +
  theme_classic() +
  xlab("Salary range") +
  ylab("Disproportionality Index") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  scale_fill_manual(
    values = colors) +
  coord_cartesian(ylim = c(.5, 1.5)) +
  theme(legend.position = "top",
        legend.title=element_blank(),
       text = element_text(size = 15),
       legend.text = element_text(size = 12)) +
  guides(fill = guide_legend(nrow=2, byrow=TRUE)) +
  annotate("text",
           y = 1.02,
            x= ">110.0K",
            hjust = .2,
            label = "Overrepresented") +
  annotate("text",
           y = 0.98,
            x= ">110.0K",
            hjust = .2,
            label = "Underrepresented")
```

## Plot 2: A direct comparison of DI in Black Employees vs. Non-Visible Minority Employees (2023)

This plot zooms in on our "baseline" group and compares it to the Black employee group, which appears to be the most affected by inequity. A steady decrease in representation with each increase in salary range is clearly visible for the Black employee group.

```{r Plot 2, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}

# Grab data 
plot2_df <-
  plot1_df |> filter(Subgroup %in% c("Non-Visible Minority Employees", "Black Employees"))

# Set color palette 
colors <- met.brewer("Johnson", 5)[c(1,5)]

# Plot 2 
ggplot(plot2_df) +
  geom_bar(
    stat = "identity",
    position = "dodge",
    aes(
      x = Subgroup,
      y = value,
      fill = Subgroup,
      alpha = `Salary range`
    )
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  scale_fill_manual  (values = colors, ) +
  labs(title = NULL,
       x = NULL,
       y = "Disproportionality Index",
       fill = NULL) +
  guides(fill = "none") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  annotate(
    "text",
    y = 1.02,
    x = "Black Employees",
    hjust = -.7,
    label = "Overrepresented"
  ) +
  annotate(
    "text",
    y = 0.98,
    x = "Black Employees",
    hjust = -.7,
    label = "Underrepresented"
  )
```

## Plot 3: Interactive DI Visualization

Here you can select years and groups to display. Click the drop down on the left to filter by year. Click each group's text under the subgroup heading on the right to remove and add data. Use your mouse to select a section to zoom into. You can also hover over each bars to see each individual data point.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 10}
# Establish percentile orders
percentile_order <- quintile_ranges |> 
  select(quintile_year, quintile_label) |> 
  filter(quintile_year == recent_year & quintile_label != "All ranges") |> 
  pull(quintile_label) |> 
  unique(fromLast = TRUE)



# Wrap text on labels
plot3_df <- di_df_long |> 
  filter(!is.na(`Salary percentile`)) |> 
  mutate(`Salary percentile` = factor(`Salary percentile`,
                                      levels = percentile_order ))

# Make a vector with corresponding colors
colors = met.brewer("Johnson", 5)

# great plotly barplot
plot3 <- ggplotly(ggplot(plot3_df, aes(fill = Subgroup,
                            y = value,
                            x = `Salary percentile`,
                            text = paste0("Year: ", Year,
                          "<br>", # Create a new line in the tooltip
                          "DI: ", value,
                          "<br>",
                          "Subgroup: ", Subgroup,
                          "<br>",
                          "Quintile: ", `Salary percentile`))) +
  geom_bar(position = 'dodge',
           stat ='identity') +
  theme_classic() +
  xlab("Salary Percentile") +
  ylab("Disproportionality Index") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  scale_fill_manual(
    values = colors) +
  coord_cartesian(ylim = c(.5, 1.5)) +
  theme(legend.position = "top",
        legend.title=element_blank(),
       text = element_text(size = 15),
       legend.text = element_text(size = 12),
       axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)),
  tooltip = "text")



plot3

```

## Plot 4: A direct comparison of DI in Black Employees vs. Non-Visible Minority Employees Over All Years (2017-2024)

```{r Plot 4, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}

# set color pallette 
colors <- met.brewer("Johnson", 5)[c(1,5)]

plot4_df <- plot3_df |> 
  filter(Subgroup %in% c("Non-Visible Minority Employees", "Black Employees"))
  

# Bar plot showing salary ranges by group
ggplot(plot4_df) +
  geom_bar(stat = "identity",
           position = "dodge",
           aes(x = Year,
               y = value,
               fill = Subgroup,
               alpha = `Salary percentile`)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  scale_fill_manual(values = colors) +
  labs(title = NULL,
       x = "Year",
       y = "Disproportionality Index") +
  coord_cartesian(ylim = c(.5, 1.5)) +
    geom_hline(yintercept = 1,
             linetype = "dashed") +
  guides(alpha=guide_legend(title="Salary Quintile"), 
         fill = guide_legend(title = "Group"))
```

# Plot 5: Disparity between Non-visible Minority Employees and Black Employees Over Time (2017-2024)

In this plot, DI disparity is calculated by subtracting the DI of Black employees from that of non-visible minority employees. It can be seen that the difference between the highest and lowest salaries percentiles are more or less remaining equal over time, with a small positive trend.

```{r Plot 5, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}
## Plot 5: An analysis of disparity over time 

plot5_df <- plot3_df |> 
  filter(Subgroup %in% c("Non-Visible Minority Employees", "Black Employees"),
         `Salary percentile` %in% c("Bottom 20th", "Top 20th")) |> 
  group_by(`Salary percentile`, Year) |> 
  mutate(disparity = value - value[Subgroup == 'Non-Visible Minority Employees']) |> 
  filter(Subgroup == "Black Employees") |> 
  select( `Salary percentile`, disparity, Year)


ggplot(data = plot5_df, aes(x = Year,
                            y = disparity,
                            group = `Salary percentile`,
                            color = `Salary percentile`)) +
         geom_line(size = 2,
                   type = "dashed") +
  ylab("DI Disparity") +
  xlab("Year") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  guides(color = guide_legend(title = "Quintile")) +
    geom_hline(yintercept = 0,
             linetype = "dashed") +
  ylim(-.6, .6)
  
```
:::

::: {.content-visible when-profile="french"}
## Graphique 1: ID de tous les groupes par tranche de salaire (2024)

La ligne en pointillé représente la représentation équitable (ID de 1). On constate que les salariés noirs sont surreprésentés dans les fourchettes de salaires inférieures et sous-représentés dans les fourchettes supérieures par rapport aux autres groupes. Comme le montrent les barres "Salariés n'appartenant pas à une minorité visible", on devrait s'attendre à une ID égale dans toutes les fourchettes de salaires.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 7.5}

# Make a vector with corresponding colors
colors = met.brewer("Johnson", 5)

# Create french labels for levels 
quintile_order_plot1_fr <- tolower(gsub("\\.", ",", quintile_order_plot1))
subgroup_order_plot1_fr <- labels |> 
  filter(type == "median") |> 
  filter(variable != c("year", "all")) |> 
  pull(fr) 

# Create 
plot_df_fr <- plot1_df |> 
  mutate(`Échelle des salaires` = factor(tolower(gsub("\\.", ",",`Salary range`)),
                                         levels = quintile_order_plot1_fr ),
        `Sous-groupe` = factor(`Sous-groupe`, 
                               levels = subgroup_order_plot1_fr))
  


# Bar plot showing salary ranges by group
ggplot(plot_df_fr, aes(fill = `Sous-groupe`,
                            y = value,
                            x = `Échelle des salaires`)) +
  geom_bar(position = 'dodge',
           stat ='identity') +
  theme_classic() +
  ylab("Indice de disproportionnalité") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  scale_fill_manual(
    values = colors) +
  coord_cartesian(ylim = c(.5, 1.5)) +
  theme(legend.position = "top",
        legend.title=element_blank(),
       text = element_text(size = 15),
       legend.text = element_text(size = 12)) +
  guides(fill = guide_legend(nrow=2, byrow=TRUE)) +
  annotate("text",
           y = 1.02,
            x= ">110,0k",
            hjust = .2,
            label = "Surreprésentés") +
  annotate("text",
           y = 0.98,
            x= ">110,0k",
            hjust = .2,
            label = "Sous-représentés")
```

## Graphique 2: Comparaison directe de l'AI chez les employés du race noirs et chez les employés n'appartenant pas à une minorité visible (2024)

Ce graphique se concentre sur notre groupe de référence et le compare au groupe des employés noirs, qui semble être le plus touché par l'iniquité. Une diminution constante de la représentation avec chaque augmentation de l'échelle salariale est clairement visible pour le groupe des employés noirs.

```{r, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}

# Grab data 
plot2_df_fr <-
  plot_df_fr |> filter(`Sous-groupe` %in% c("Employés Non-Minorité visible", "Employés de race noire")
  )

# Set color palette 
colors <- met.brewer("Johnson", 5)[c(1,5)]

# Plot 2 
ggplot(plot2_df_fr) +
  geom_bar(
    stat = "identity",
    position = "dodge",
    aes(
      x = `Sous-groupe`,
      y = value,
      fill = `Sous-groupe`,
      alpha = `Échelle des salaires`
    )
  ) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  scale_fill_manual  (values = colors) +
  labs(title = NULL,
       x = NULL,
       y = "Indice de disproportionnalité",
       fill = NULL) +
  guides(fill = "none") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  annotate(
    "text",
    y = 1.02,
    x = "Employés de race noire",
    hjust = -.5,
    label = "Surreprésentés"
  ) +
  annotate(
    "text",
    y = 0.98,
    x = "Employés de race noire",
    hjust = -.5,
    label = "Sous-représentés"
  )
```

## Graphique 3: Visualisation interactive de l'ID

Vous pouvez ici sélectionner les années et les groupes à afficher. Cliquez sur le menu déroulant à gauche pour filtrer par année. Cliquez sur le texte de chaque groupe sous l'intitulé du sous-groupe à droite pour supprimer et ajouter des données. Utilisez votre souris pour sélectionner une section à agrandir. Vous pouvez également passer la souris sur chaque barre pour voir chaque point de données individuel.

```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 10}
# Establish percentile orders
percentile_order_fr <- quintile_ranges |> 
  left_join(labels |>  filter(type == "quintile_comparable") |> select(en, fr),
            by = c("quintile_label" = "en")) |> 
  pull(fr) |> 
  unique(fromLast = TRUE)


# Set factor levels
plot3_df_fr <- di_df_long |> 
  filter(quintile != "All ranges") |> 
  mutate(`Percentile de salaire` = factor(`Percentile de salaire`, 
                                          levels = percentile_order_fr),
         `Sous-groupe` = factor(`Sous-groupe`, 
                                levels = subgroup_order_plot1_fr))

# Make a vector with corresponding colors
colors = met.brewer("Johnson", 5)

# great plotly barplot
ggplotly(ggplot(plot3_df_fr, aes(fill = `Sous-groupe`,
                            y = value,
                            x = `Percentile de salaire`,
                            text = paste0("Année: ", Year,
                          "<br>", # Create a new line in the tooltip
                          "DI: ", value,
                          "<br>",
                          "Sous-groupe: ", `Sous-groupe`,
                          "<br>",
                          "Quintile: ", tolower(gsub("\\.", ",", `Salary range`))))) +
  geom_bar(position = 'dodge',
           stat ='identity') +
  theme_classic() +
  xlab("Percentile de salaire") +
  ylab("Indice de disproportionnalité") +
  geom_hline(yintercept = 1,
             linetype = "dashed") +
  scale_fill_manual(
    values = colors) +
  coord_cartesian(ylim = c(.5, 1.5)) +
  theme(legend.position = "top",
        legend.title=element_blank(),
       text = element_text(size = 15),
       legend.text = element_text(size = 12),
       axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)),
  tooltip = "text")

```

## Graphique 4: Comparaison directe des DI des employés noirs par rapport aux employés n'appartenant pas à une minorité visible sur toutes les années (2017-2024)

```{r, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}

# set color pallette 
colors <- met.brewer("Johnson", 5)[c(1,5)]

plot4_df <- plot3_df_fr |> 
  filter(`Sous-groupe` %in% c("Employés Non-Minorité visible", "Employés de race noire"))
  

# Bar plot showing salary ranges by group
ggplot(plot4_df) +
  geom_bar(stat = "identity",
           position = "dodge",
           aes(x = Year,
               y = value,
               fill = `Sous-groupe`,
               alpha = `Percentile de salaire`)) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  scale_fill_manual(values = colors) +
  labs(title = NULL,
       x = "Année",
       y = "Indice de disproportionnalité") +
  coord_cartesian(ylim = c(.5, 1.5)) +
    geom_hline(yintercept = 1,
             linetype = "dashed") +
  guides(alpha=guide_legend(title="Quintile de salaire"), 
         fill = guide_legend(title = "Sous-group"))


```

# Graphique 5 : Disparité entre les employés issus des minorités non visibles et les employés noirs au fil du temps (2017-2024)

Dans ce graphique, la disparité DI est calculée en soustrayant la DI des employés noirs de celle des employés n'appartenant pas à une minorité visible. On constate que la différence entre les percentiles des salaires les plus élevés et les plus bas reste plus ou moins égale au fil du temps, avec une légère tendance positive.

```{r, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}
## Plot 5: An analysis of disparity over time 

plot5_df_fr <- plot3_df_fr |> 
  filter(`Sous-groupe` %in% c("Employés Non-Minorité visible", "Employés de race noire") &
         `Percentile de salaire` %in% c("20e inférieur", "20e supérieur")) |> 
  group_by(`Percentile de salaire`, Year) |> 
  mutate(disparity = value - value[`Sous-groupe` == "Employés Non-Minorité visible"]) |> 
  filter(`Sous-groupe` == "Employés de race noire") |> 
  select( `Percentile de salaire`, disparity, Year)


ggplot(data = plot5_df_fr, aes(x = Year,
                            y = disparity,
                            group = `Percentile de salaire`,
                            color = `Percentile de salaire`)) +
         geom_line(size = 2,
                   type = "dashed") +
  ylab("Disparité de l'ID") +
  xlab("Année") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    text = element_text(size = 15),
    legend.text = element_text(size = 12)
  ) +
  guides(color = guide_legend(title = "Quintile")) +
    geom_hline(yintercept = 0,
             linetype = "dashed") +
  ylim(-.6, .6)
  

```
:::

{"title":"Visualizations","markdown":{"yaml":{"title":"Visualizations","format":"html","editor":"visual"},"headingText":"Gather and clean data ----","containsRefs":false,"markdown":"\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n\nlibrary(rvest)\nlibrary(tidyr)\nlibrary(plotly)\nlibrary(flextable)\nlibrary(stringr)\nlibrary(MetBrewer)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(crosstalk)\n```\n\n```{r echo=FALSE, message=FALSE, include = FALSE, warning=FALSE}\n\nremove_bullish <- function(bullish_cols) {\n  as.numeric(gsub(\n    pattern = \"[^0-9.-]\",\n    replacement = \"\",\n    x = bullish_cols\n  ))\n}\n\nremove_spaces <- function(spacey_cols) {\n  gsub(\n    pattern = \"\\\\s+\",\n    replacement = \" \",\n    x = spacey_cols\n  )\n}\n\n\n\n# Define root directory for TBS website with salary data\nurl <-\n  \"https://www.canada.ca/en/treasury-board-secretariat/services/innovation/human-resources-statistics/diversity-inclusion-statistics/distribution-public-service-canada-employees-designated-sub-group-salary-range-\"\n\n# List of years to get data for \nyears <- c(\"2022\", \"2021\", \"2020\", \"2019\", \"2018\", \"2017\")\n           \n# Create function to get salary data from website over 5 years\nget_salary_data <- function(Year) {\n  # Match years to their index in the data\n  year_dictionary <- data.frame(year = years,\n                                index = c(1:length(years)))\n  \n  # Index for year\n  year_index <-\n    as.numeric(year_dictionary$index[year_dictionary$year == Year])\n  \n  # Strings to remove\n  to_match <- c('Table', 'Total')\n  \n  # Run data processing steps\n  assign(paste(\"salary_df\", Year, sep = \"_\"),\n         \n         {\n           merge(x = {\n             ## Visible Minority and Black employees ----\n             {\n               html_nodes(read_html(paste0(\n                 url,\n                 \"members-visible-minorities\"\n               )), \"table\") %>%\n                 html_table(fill = TRUE)\n             }[[year_index]][-c(1, 19), c(1:4, 25)] %>% # retrieve all employees and total vm column\n               dplyr::rename(\n                 salary_range = \"Salary range ($)\",\n                 count_all = \"All employees\",\n                 count_black = \"Black\",\n                 count_vm = \"Members of visible minorities\"\n               )\n           },\n           y = {\n             ## Indigenous ----\n             {\n               html_nodes(read_html(paste0(url,\n                                           \"indigenous-peoples\")), \"table\") %>%\n                 html_table(fill = TRUE)\n             }[[year_index]][-c(1, 19), c(1, 11)] %>% # retrieve total indigenous column\n               dplyr::rename(salary_range = \"Salary range ($)\",\n                             count_indigenous = \"Indigenous Peoples\") %>%\n               mutate(salary_range = str_remove_all(salary_range, \"[$]\"))\n           },\n           by = \"salary_range\",\n           all = TRUE) %>%\n             merge(y = {\n               ## Persons with disabilities ----\n               {\n                 html_nodes(read_html(paste0(url,\n                                             \"persons-disabilities\")), \"table\") %>%\n                   html_table(fill = TRUE)\n               }[[year_index]][-c(1, 19), c(1, 15)] %>% # retrieve total pwd column\n                 dplyr::rename(salary_range = \"Salary range ($)\",\n                               count_pwd = \"Persons with disabilities\") %>%\n                 mutate(salary_range = str_remove_all(salary_range, \"[$]\"))\n             },\n             by = \"salary_range\",\n             all = TRUE) %>%\n             mutate(across(everything(), ~ replace(., . ==  \"Table 1 Footnote *\" , NA))) %>% # replace foonote with NA\n             mutate_at(vars(matches(\"count\")), remove_bullish) %>% # remove extra characters\n             mutate_at(vars(matches(\"salary\")), remove_spaces) %>% # remove extra spaces\n             filter(!grepl(\"Notes\", salary_range)) %>% # remove unneeded columns\n             select(-c(\"Black\"))\n         },\n         envir = globalenv())\n}\n\n\n# Get data for all years\n# This step usually takes a while to run due to accessing the API\nlapply(years, get_salary_data) %>% \n  bind_rows()\n\n# Fix 2022 data - collapse under 50K \n# 2022 data has both \"Under 25K\" and \"Under 50K\" salaries. Here we will collapse those two categories as well as the  \"25K-49K\" category into \"Under 50K\" for consistency \nsalary_df_2022 <-\n  salary_df_2022 %>% mutate(salary_range = case_when(\n    salary_range %in% c(\"Under 25,000\",\n                        \"Under 50,000\",\n                        \"25,000 to 49,999\") ~ \"Under 50,000\",\n    TRUE ~ salary_range\n  )) %>%\n  group_by(salary_range) %>%\n  summarise(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)\n  )\n  \n\n\n# list of name of databases by year\nyears_data <- paste(\"salary_df\", years, sep = \"_\")\nyears_data_cat <- mget(years_data)\n\n# Concat all year's data into a single dataframe \nyears_data_cat <- do.call(\"rbind\", years_data_cat)\n\n# Make a year column and remove unnessecary row names\nyears_data_cat$Year <- substr(rownames(years_data_cat), 11, 14)\nrownames(years_data_cat) <- NULL\n\n# Aggregate \"total\" columns\nyears_data_cat <-\n  years_data_cat %>%\n  mutate(salary_range = ifelse(grepl('Total', salary_range), \"Total\", salary_range)) %>%\n  group_by(salary_range, Year) %>%  \n  summarise_all(list( ~ sum(., na.rm = T)))\n\n# Imputation: add in imputed values to replace suppressed numbers \nimputation_data <- read.csv(\"imputation_estimates.csv\", encoding = \"UTF-8\")\n\n# Remove non-space characters and replace with spaces \nimputation_data$salary_range <- str_replace_all(imputation_data$salary_range, \"\\\\s\", \" \")\n\n# Loop to impute numbers into df\nfor (i in 1:nrow(imputation_data)){\n  # separate imputation date into groups\n  imputation_data_black <- imputation_data %>% \n    filter(Group == \"count_black\")\n  imputation_data_indigenous <- imputation_data %>% \n    filter(Group == \"count_indigenous\")\n  imputation_data_vm <- imputation_data %>% \n    filter(Group == \"count_vm\")\n  # Use case_when to meet conditions from imputation data\n  years_data_cat <- years_data_cat %>% \n    mutate(old_val = count_black) %>%\n    mutate(count_black = case_when(\n        Year == imputation_data_black$Year[i] & \n          salary_range == imputation_data_black$salary_range[i] ~  imputation_data_black$value[i], \n        .default = old_val\n      )\n    ) %>%\n    mutate(old_val = count_indigenous) %>%\n    mutate(count_indigenous = case_when(\n        Year == imputation_data_indigenous$Year[i] & \n          salary_range == imputation_data_indigenous$salary_range[i] ~  imputation_data_indigenous$value[i], \n        .default = old_val\n      )\n    ) %>%\n        mutate(old_val = count_vm) %>%\n    mutate(count_vm = case_when(\n        Year == imputation_data_vm$Year[i] & \n          salary_range == imputation_data_vm$salary_range[i] ~  imputation_data_vm$value[i], \n        .default = old_val\n      )\n    ) %>%\n    select(-c(old_val)) %>%\n             mutate(count_non_vm = count_all - count_vm) # calculate non vm (all - vm's)\n}\n\n# Clear workspace of unneeded df's and functions in saved memory\nrm(salary_df_2017, salary_df_2018, salary_df_2019, salary_df_2020, salary_df_2021, salary_df_2022, url, get_salary_data, remove_bullish, remove_spaces)\n\n# read in salary bin data\ntemp <-read.csv(\"ee_dv_salarybins.csv\", fileEncoding = \"UTF-8-BOM\")\n\n# df for renaming cols\nmedian_colnames <- c(\"salary_range\", \n                       \"Year\", \n                       \"count_all\", \n                       \"count_black\", \n                       \"count_vm\", \n                       \"count_indigenous\", \n                       \"count_pwd\", \n                       \"count_non_vm\",\n                        \"bin_width\",\n                       \"bin_width_cumsum\", \n                       \"cumsum_all\",\n                       \"cumsum_black\",\n                       \"cumsum_vm\",\n                       \"cumsum_indigenous\",\n                       \"cumsum_pwd\",\n                       \"cumsum_non_vm\",\n                       \"half_pop_all\",\n                       \"half_pop_black\",\n                       \"half_pop_vm\",\n                       \"half_pop_indigenous\",\n                       \"half_pop_pwd\",\n                       \"half_pop_non_vm\")\n  \n# Create final datasets with cumulative frequencies and bins\ndf <-\n  merge(\n    x = years_data_cat, # read in yearly salary data by group\n    y = { # match dataset to bin categories and widths from different years\n        bind_rows(\n      {temp[, c(1:2)] %>% dplyr::rename(bins = bins_2022, bin_width = bin_width_2022)},           \n    {temp[, c(3:4)] %>% dplyr::rename(bins = bins_2021, bin_width = bin_width_2021)}, \n    {temp[, c(5:6)] %>% dplyr::rename(bins = bins_2020, bin_width = bin_width_2020)},\n    {temp[, c(7:8)] %>% dplyr::rename(bins = bins_2019, bin_width = bin_width_2019)},\n    {temp[, c(9:10)] %>% dplyr::rename(bins = bins_2018, bin_width = bin_width_2018)},\n    {temp[, c(11:12)] %>% dplyr::rename(bins = bins_2017, bin_width = bin_width_2017)},\n    .id = \"key\"\n  ) %>%\n  mutate(year = case_when( # add year \"keys\" (html pull indexes years by numbers)\n    key == \"1\" ~ 2022,\n    key == \"2\" ~ 2021,\n    key == \"3\" ~ 2020,\n    key == \"4\" ~ 2019,\n    key == \"5\" ~ 2018, \n    key == \"6\" ~ 2017\n  )) %>% \n  select(-key) %>%  # remove key data\n  filter(!is.na(bins))\n    },\n    by.x = c(\"salary_range\", \"Year\"),\n    by.y = c(\"bins\", \"year\"),\n    all.x = TRUE\n  )  %>% arrange( # arrange salary ranges from lowest to highest using factors\n    Year,\n    factor(\n      salary_range,\n      levels = c(\n        \"Under 15,000\",\n        \"Under 25,000\",\n        \"Under 50,000\",\n        \"15,000 to 49,999\",\n        \"25,000 to 49,999\",\n        \"50,000 to 54,999\",\n        \"55,000 to 59,999\",\n        \"60,000 to 64,999\",\n        \"65,000 to 69,999\",\n        \"70,000 to 74,999\",\n        \"75,000 to 79,999\",\n        \"80,000 to 84,999\",\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\",\n        \"100,000 to 149,999\",\n        \"150,000 to 199,999\",\n        \"200,000 to 249,999\",\n        \"100,000 and over\",\n        \"250,000 and over\",\n        \"Total\"\n      )\n  )) %>% \n  group_by(Year) %>% # get cumulative frequencies with cumsum()\n    mutate(\n      cumsum_bin_width = cumsum(bin_width), \n      cumsum_all = cumsum(count_all),\n      cumsum_black = cumsum(count_black),\n      cumsum_vm = cumsum(count_vm),\n      cumsum_indigenous = cumsum(count_indigenous),\n      cumsum_pwd = cumsum(count_pwd),\n      cumsum_non_vm = cumsum(count_non_vm)\n    ) %>% ungroup() %>%\n  pivot_longer( # change data to longform\n    cols = c(starts_with(\"count\"), starts_with(\"cumsum\")),\n    names_to = \"group\",\n    values_to = \"count_cumsum\"\n  ) %>%\n  group_by(Year, group) %>% \n    mutate(total = ifelse((grepl(pattern = \"count_\", x = group) & salary_range == \"Total\"), count_cumsum, NA)) %>% # if total, make cumsum NA\n  fill(total, .direction = \"up\") %>% \n  ungroup() %>% \n  mutate(half_pop = total/2) %>% # get half population per bin\n  group_by(Year, group)\n\n```\n\n```{r echo=FALSE, message=FALSE, include = FALSE, warning=FALSE}\n\n# Median Calculations -----------------------------------------------------\n\n# Create a function that calculates median for each group for a year\n  # median = lower limit of median group + ((half pop - cum freq up to median)/ pop of median group) * width of median group\n\n\nest_median <- function(year, ee_group) {\n  # pull salary data by year and change back to wide format\n  median_df <-\n    df %>%\n    filter(Year == year) %>% # filter for selected year\n    pivot_wider(names_from = \"group\", # change back to wide format\n                values_from = c(\"count_cumsum\", \n                                \"total\", \n                                \"half_pop\")) %>%\n     dplyr::select(-contains(c(\"total_cumsum\", # remove unneeded cols\n                               \"total_count\",\n                               \"half_pop_cumsum\"))) \n  \n  # rename cols\n  median_colnames <- c(\"salary_range\", \n                       \"Year\", \n                       \"bin_width\",\n                       \"count_all\", \n                       \"count_black\", \n                       \"count_vm\", \n                       \"count_indigenous\", \n                       \"count_pwd\", \n                       \"count_non_vm\",\n                       \"bin_width_cumsum\", \n                       \"cumsum_all\",\n                       \"cumsum_black\",\n                       \"cumsum_vm\",\n                       \"cumsum_indigenous\",\n                       \"cumsum_pwd\",\n                       \"cumsum_non_vm\",\n                       \"half_pop_all\",\n                       \"half_pop_black\",\n                       \"half_pop_vm\",\n                       \"half_pop_indigenous\",\n                       \"half_pop_pwd\",\n                       \"half_pop_non_vm\")\n  \n  colnames(median_df) <- median_colnames\n  half_pop <- as.numeric(first(median_df[paste(\"half_pop_\", ee_group, sep = \"\")])[1])\n    \n  # find lower limit of median group\n  median_group_ll <- max(median_df$bin_width_cumsum[median_df[paste(\"cumsum_\", ee_group, sep = \"\")] < half_pop], na.rm=TRUE)\n  \n  # find the cumulative frequncy up the median\n  cumsum_uptomedian <- max(median_df[paste(\"cumsum_\", ee_group, sep = \"\")][median_df[paste(\"cumsum_\", ee_group, sep = \"\")]< half_pop], na.rm=TRUE)\n  \n  # find the frequency of the median group\n  freq_mediangroup <- median_df[paste(\"count_\", ee_group, sep = \"\")][median_df[paste(\"cumsum_\", ee_group, sep = \"\")] > half_pop][1]\n  \n  # find the width of the median group \n  width_mediangroup <- median_df$bin_width[median_df[paste(\"cumsum_\", ee_group, sep = \"\")] > half_pop][1]\n  \n  # calculate median [finally (●'◡'●)]\n  median <- median_group_ll + ((half_pop - cumsum_uptomedian ) / freq_mediangroup) * width_mediangroup  \n  \n  # Create output and place in global environment\n  assign(\"median_table\", \n         {data.table(med = median, \n                             med_year = year, \n                             group = ee_group)}, \n         envir=globalenv())\n}\n```\n\n## Median Salary Tables\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n# run across all years and groups\ngroups <- c(\"black\", \"vm\", \"indigenous\", \"pwd\", \"non_vm\", \"all\")\n\n# Create empty df's \nmedian_df_2022 <- data.frame(median = NA, med_year = NA, group = NA)\nmedian_df_2021 <- data.frame(median = NA, med_year = NA, group = NA)\nmedian_df_2020 <- data.frame(median = NA, med_year = NA, group = NA)\nmedian_df_2019 <- data.frame(median = NA, med_year = NA, group = NA) \nmedian_df_2018 <- data.frame(median = NA, med_year = NA, group = NA)\nmedian_df_2017 <- data.frame(median = NA, med_year = NA, group = NA)\n\n# Get median for all years and groups\nfor (i in 1:length(groups)){\n  median_df_2022[i,] <- est_median(\"2022\", groups[i])\n}\nfor (i in 1:length(groups)){\n  median_df_2021[i,] <- est_median(\"2021\", groups[i])\n}\nfor (i in 1:length(groups)){\n  median_df_2020[i,] <- est_median(\"2020\", groups[i])\n}\nfor (i in 1:length(groups)){\n  median_df_2019[i,] <- est_median(\"2019\", groups[i])\n}\nfor (i in 1:length(groups)){\n  median_df_2018[i,] <- est_median(\"2018\", groups[i])\n}\nfor (i in 1:length(groups)){\n  median_df_2017[i,] <- est_median(\"2017\", groups[i])\n}\n# Concat all median df's together with rbind\nmedian_df_final <- rbind(median_df_2022, median_df_2021, median_df_2020, median_df_2019, median_df_2018, median_df_2017)\n# Remove unneeded df's from memory\nrm(median_df_2022, median_df_2021, median_df_2020, median_df_2019, median_df_2018, median_df_2017)\n\n# Create function and apply to round to nearest $50\nround_any = function(x, accuracy, f=round){f(x/ accuracy) * accuracy}\nmedian_df_final$median <- round_any(median_df_final$median, accuracy = 50)\n\n# Swap to wide format for presentation\nmedian_df_wide <- spread(median_df_final, group, median) %>% \n  select(med_year, all, non_vm, vm, black, indigenous, pwd) %>% \n  arrange(desc(med_year))\n\n# Add better group labels \ncolnames(median_df_wide) <-\n  c(\n    \"Year\",\n    \"All Employees\",\n    \"Non-Visible Minority Employees\",\n    \"Visible Minority Employees\",\n    \"Black Employees\",\n    \"Indigenous Employees\",\n    \"Employees with Disabilities\"\n  )\n\n# Color matrix to color table\ncolors <- met.brewer(\"Hiroshige\", 5)[c(1,4)]\ncolormatrix <- ifelse(median_df_wide[, -(1:2)] > median_df_wide$`All Employees`, colors[1], colors[2])\n\n# Make formatted table\ntheme_zebra(align(flextable(median_df_wide), align = \"center\")) %>% color(j = 3:7, color = colormatrix)\n```\n\n## Disproportionality Tables \n\n::: {.panel-tabset}\n\n### 2022\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n\n# In this chunk: calculate DI's and flextable 2022 data\ndi_df_2022 <- years_data_cat %>%\n  filter(Year == \"2022\") %>%\n  mutate(\n    range_group = case_when(# group salary ranges into quintiles\n      salary_range %in% c(\n        \"Under 25,000\",\n        \"25,000 to 49,999\",\n        \"50,000 to 54,999\",\n        \"55,000 to 59,999\"\n      ) ~ \"Less than $60,000\",\n      salary_range %in% c(\n        \"60,000 to 64,999\", \n        \"65,000 to 69,999\"\n        ) ~ \"$60,000 to $69,999\", \n      salary_range %in% c(\n        \"70,000 to 74,999\", \n        \"75,000 to 79,999\", \n        \"80,000 to 84,999\"\n        ) ~ \"$70,000 to $84,999\",\n      salary_range %in% c(\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\"\n        ) ~ \"$85,000 to $99,999\",\n      salary_range %in% c(\n        \"100,000 to 149,999\",\n        \"150,000 to 199,999\",\n        \"200,000 to 249,999\",\n        \"250,000 and over\"\n      ) ~ \"Over $100,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% \n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)\n  ) %>%\n  ungroup()\n\n\ndi_df_2022 <- \n  di_df_2022[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  dplyr::select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2022\")\n\n# ---- Export Table 2022\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\n# REMOVE YEAR TOO\nexport_table_2022 <- flextable(select(di_df_2022, -contains(\"chart\")) %>% select(-c(\"year\")))\n\n# Change header labels\nexport_table_2022 <- set_header_labels(export_table_2022,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\n\nexport_table_2022 <-  add_header_row(\n  export_table_2022,\n  colwidths = c(1, 2, 2, 2, 2, 2, 2),\n  values = c(\n    \" \",\n    \"All Employees\",\n    \"Black Employees\",\n    \"All Visible Minority Employees\",\n    \"Non-Visible Minority Employees\",\n    \"Indigenous Employees\",\n    \"Employees with Disabilities\"\n  )\n)\n\ntheme_zebra(export_table_2022)\n```\n\n### 2021\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n# In this chunk: calculate DI's and flextable 2021 data\ndi_df_2021 <- years_data_cat %>%  \n  filter(Year == \"2021\") %>%\n  mutate(range_group = case_when(\n      salary_range %in% c(\n        \"Under 25,000\",\n        \"25,000 to 49,999\",\n        \"50,000 to 54,999\",\n        \"55,000 to 59,999\"\n      ) ~ \"Less than $60,000\",\n      salary_range %in% c(\n        \"60,000 to 64,999\", \n        \"65,000 to 69,999\"\n        ) ~ \"$60,000 to $69,999\",\n      salary_range %in% c(\n        \"70,000 to 74,999\", \n        \"75,000 to 79,999\", \n        \"80,000 to 84,999\"\n        ) ~ \"$70,000 to $84,999\",\n      salary_range %in% c(\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\"\n        ) ~ \"$85,000 to $99,999\",\n      salary_range %in% c(\n        \"100,000 to 149,999\",\n        \"150,000 to 199,999\",\n        \"200,000 to 249,999\",\n        \"250,000 and over\"\n        ) ~ \"Over $100,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% # group salary ranges \n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)) %>% \n  ungroup()\n\ndi_df_2021 <- \n  di_df_2021[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  dplyr::select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2021\")\n\n# ---- Export Table 2021\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\nexport_table_2021 <- flextable(select(di_df_2021, -contains(\"chart\")) %>% select(-c(\"year\")))\n\n# Change header labels\nexport_table_2021 <- set_header_labels(export_table_2021,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\n\nexport_table_2021 <-  add_header_row(\n  export_table_2021,\n  colwidths = c(1, 2, 2, 2, 2, 2, 2),\n  values = c(\n    \" \",\n    \"All Employees\",\n    \"Black Employees\",\n    \"All Visible Minority Employees\",\n    \"Non-Visible Minority Employees\",\n    \"Indigenous Employees\",\n    \"Employees with Disabilities\"\n  )\n)\n\ntheme_zebra(export_table_2021)\n```\n\n### 2020\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n# In this chunk: calculate DI's and flextable 2020 data\ndi_df_2020 <- years_data_cat %>%  \n  filter(Year == \"2020\") %>% mutate(\n    salary_range = sub(\n      pattern = \"    \",\n      replacement = \" \",\n      x = salary_range\n    ), # remove extra spaces in salary range column\n    range_group = case_when(\n      salary_range %in% c(\n        \"Under 50,000\",\n        \"50,000 to 54,999\",\n        \"55,000 to 59,999\"\n        ) ~ \"Less than $60,000\",\n      salary_range %in% c(\n        \"60,000 to 64,999\",\n        \"65,000 to 69,999\"\n        ) ~ \"$60,000 to $69,999\",\n      salary_range %in% c(\n        \"70,000 to 74,999\",\n        \"75,000 to 79,999\",\n        \"80,000 to 84,999\"\n        ) ~ \"$70,000 to $84,999\",\n      salary_range %in% c(\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\"\n        ) ~ \"$85,000 to $99,999\",\n      salary_range %in% c(\n        \"100,000 to 149,999\",\n        \"150,000 to 199,999\",\n        \"200,000 to 249,999\",\n        \"250,000 and over\"\n      ) ~ \"Over $100,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% # group salary ranges into quintiles\n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)) %>% \n  ungroup() # summarize values in predetermined salary range groups\n\ndi_df_2020 <- \n  di_df_2020[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2020\")\n\n# ---- Export Table 2020\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\nexport_table_2020 <- flextable(select(di_df_2020, -contains(\"chart\")) %>% select(-c(\"year\")))\n\n# Change header labels\nexport_table_2020 <- set_header_labels(export_table_2020,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\nexport_table_2020 <-  add_header_row(export_table_2020,\n                     colwidths = c(1, 2,2,2,2,2,2),\n                     values = c(\" \", \"All Employees\", \"Black Employees\", \"All Visible Minority Employees\", \"Non-Visible Minority Employees\", \"Indigenous Employees\", \"Employees with Disabilities\"))\ntheme_zebra(export_table_2020)\n```\n\n### 2019\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n# In this chunk: calculate DI's and flextable 2019 data\ndi_df_2019 <- years_data_cat %>%  \n  filter(Year == \"2019\") %>% mutate(\n    salary_range = sub(\n      pattern = \"    \",\n      replacement = \" \",\n      x = salary_range\n    ), # remove extra spaces in salary range column\n    range_group = case_when(\n      salary_range %in% c(\n        \"Under 15,000\",\n        \"15,000 to 49,999\",\n        \"50,000 to 54,999\",\n        \"55,000 to 59,999\"\n        ) ~ \"Less than $60,000\",\n      salary_range %in% c(\n        \"60,000 to 64,999\",\n        \"65,000 to 69,999\"\n        ) ~ \"$60,000 to $69,999\",\n      salary_range %in% c(\n        \"70,000 to 74,999\",\n        \"75,000 to 79,999\",\n        \"80,000 to 84,999\"\n        ) ~ \"$70,000 to $84,999\",\n      salary_range %in% c(\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\"\n        ) ~ \"$85,000 to $99,999\",\n      salary_range %in% c(\n        \"100,000 to 149,999\",\n        \"150,000 to 199,999\",\n        \"200,000 to 249,999\",\n        \"250,000 and over\"\n        ) ~ \"Over $100,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% # group salary ranges into quintiles\n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)) %>% \n  ungroup() # summarize values in predetermined salary range groups\n\n\ndi_df_2019 <- \n  di_df_2019[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2019\")\n\n# ---- Export Table 2019\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\nexport_table_2019 <- flextable(select(di_df_2019, -contains(\"chart\")) %>% select(-c(\"year\")))\n\n# Change header labels\nexport_table_2019 <- set_header_labels(export_table_2019,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\nexport_table_2019 <-  add_header_row(\n  export_table_2019,\n  colwidths = c(1, 2, 2, 2, 2, 2, 2),\n  values = c(\n    \" \",\n    \"All Employees\",\n    \"Black Employees\",\n    \"All Visible Minority Employees\",\n    \"Non-Visible Minority Employees\",\n    \"Indigenous Employees\",\n    \"Employees with Disabilities\"\n  )\n)\ntheme_zebra(export_table_2019)\n```\n\n### 2018\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n# In this chunk: calculate DI's and flextable 2018 data\ndi_df_2018 <- years_data_cat %>%  \n  filter(Year == \"2018\") %>% mutate(\n    salary_range = sub(\n      pattern = \"    \",\n      replacement = \" \",\n      x = salary_range\n    ), # remove extra spaces in salary range column\n    range_group = case_when(\n salary_range %in% c(\n   \"Under 50,000\",\n   \"50,000 to 54,999\",\n   \"55,000 to 59,999\"\n   ) ~ \"Less than $60,000\",\n      salary_range %in% c(\n        \"60,000 to 64,999\",\n        \"65,000 to 69,999\"\n        ) ~ \"$60,000 to $69,999\",\n      salary_range %in% c(\n        \"70,000 to 74,999\",\n        \"75,000 to 79,999\",\n        \"80,000 to 84,999\"\n        ) ~ \"$70,000 to $84,999\",\n      salary_range %in% c(\n        \"85,000 to 89,999\",\n        \"90,000 to 94,999\",\n        \"95,000 to 99,999\"\n        ) ~ \"$85,000 to $99,999\",\n      salary_range %in% c(\n        \"100,000 and over\"\n        ) ~ \"Over $100,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% # group salary ranges to match Dr. Martin's numbers\n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)) %>% \n  ungroup() # summarize values in predetermined salary range groups\n\n\ndi_df_2018 <- \n  di_df_2018[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2018\")\n\n\n# ---- Export Table 2018\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\nexport_table_2018 <- flextable(select(di_df_2018, -contains(\"chart\")) %>% select(-c(\"year\")))\n\n# Change header labels\nexport_table_2018 <- set_header_labels(export_table_2018,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\nexport_table_2018 <-  add_header_row(export_table_2018,\n                     colwidths = c(1, 2,2,2,2,2,2),\n                     values = c(\" \", \"All Employees\", \"Black Employees\", \"All Visible Minority Employees\", \"Non-Visible Minority Employees\", \"Indigenous Employees\", \"Employees with Disabilities\"))\ntheme_zebra(export_table_2018)\n```\n\n### 2017\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n\n# In this chunk: calculate DI's and flextable 2017 data\ndi_df_2017 <- years_data_cat %>%  \n  filter(Year == \"2017\") %>% dplyr::mutate(\n    salary_range = sub(\n      pattern = \"    \",\n      replacement = \" \",\n      x = salary_range\n    ), # remove extra spaces in salary range column\n    range_group = case_when(\n   salary_range %in% c(\"Under 50,000\",\n                          \"50,000 to 54,999\"\n                          ) ~ \"Less than $55,000\",\n      salary_range %in% c(\"55,000 to 59,999\", \n                          \"60,000 to 64,999\"\n                          ) ~ \"$55,000 to $64,999\",\n      salary_range %in% c(\"65,000 to 69,999\", \n                          \"70,000 to 74,999\", \n                          \"75,000 to 79,999\"\n                          ) ~ \"$65,000 to $79,999\",\n      salary_range %in% c(\"80,000 to 84,999\", \n                          \"85,000 to 89,999\",\n                          \"90,000 to 94,999\"\n                          ) ~ \"$80,000 to $94,999\",\n      salary_range %in% c(\"95,000 to 99,999\", \n                          \"100,000 and over\"\n                          ) ~ \"Over $95,000K\",\n      TRUE ~ \"All ranges\"\n    )\n  ) %>% # group salary ranges into quintiles\n  dplyr::group_by(range_group) %>%\n  dplyr::summarize(\n    count_all = sum(count_all, na.rm = TRUE),\n    count_black = sum(count_black, na.rm = TRUE),\n    count_vm = sum(count_vm, na.rm = TRUE),\n    count_non_vm = count_all - count_vm,\n    count_indigenous = sum(count_indigenous, na.rm = TRUE),\n    count_pwd = sum(count_pwd, na.rm = TRUE)) %>% \n  ungroup() # summarize values in predetermined salary range groups\n\ndi_df_2017 <- \n  di_df_2017[c(5, 1, 2, 3, 6, 4), ] %>% # reorder rows\n  dplyr::mutate(\n    # create new column for percentage of representation within subgroup\n    per_all = round(count_all / count_all[n()] * 100, 2),\n    per_black = round(count_black / count_black[n()] * 100, 2),\n    per_vm = round(count_vm / count_vm[n()] * 100, 2),\n    per_non_vm = round(count_non_vm / count_non_vm[n()] * 100, 2),\n    per_indigenous = round(count_indigenous / count_indigenous[n()] * 100, 2),\n    per_pwd = round(count_pwd / count_pwd[n()] * 100, 2),\n    \n    # create new column for disproportionality index (DI)\n    di_all = 1,\n    di_black = round(per_black / per_all, 2),\n    di_vm = round(per_vm / per_all, 2),\n    di_non_vm = round(per_non_vm / per_all, 2),\n    di_indigenous = round(per_indigenous / per_all, 2),\n    di_pwd = round(per_pwd / per_all, 2),\n    \n    # create new column to highlight difference from 1 for DI\n    chart_black = di_black - 1,\n    chart_vm = di_vm - 1,\n    chart_non_vm = di_non_vm - 1,\n    chart_indigenous = di_indigenous - 1,\n    chart_pwd = di_pwd - 1,\n  ) %>%\n  select(\n    range_group,\n    per_all,\n    di_all,\n    \n    per_black,\n    di_black,\n    chart_black,\n    \n    per_vm,\n    di_vm,\n    chart_vm,\n    \n    per_non_vm,\n    di_non_vm,\n    chart_non_vm,\n    \n    per_indigenous,\n    di_indigenous,\n    chart_indigenous,\n    \n    per_pwd,\n    di_pwd,\n    chart_pwd\n  ) %>% \n  mutate(year = \"2017\")\n# ---- Export Table 2017\n# Create table to show raw data \n# Remove chart columns amd convert to flextable object\nexport_table_2017 <- flextable(select(di_df_2017, -contains(\"chart\")) %>% select(-c(\"year\")))\n# Change header labels\nexport_table_2017 <- set_header_labels(export_table_2017,\n  values = list(\n    range_group = \"Salary Range\",\n    per_all = \"Percent\",\n    di_all = \"DI\",\n    per_black = \"Percent\",\n    di_black = \"DI\",\n    per_vm = \"Percent\",\n    di_vm = \"DI\",\n    per_non_vm = \"Percent\",\n    di_non_vm = \"DI\",\n    per_indigenous = \"Percent\",\n    di_indigenous = \"DI\",\n    per_pwd = \"Percent\",\n    di_pwd = \"DI\"\n  )\n)\n\nexport_table_2017 <-  add_header_row(\n  export_table_2017,\n  colwidths = c(1, 2, 2, 2, 2, 2, 2),\n  values = c(\n    \" \",\n    \"All Employees\",\n    \"Black Employees\",\n    \"All Visible Minority Employees\",\n    \"Non-Visible Minority Employees\",\n    \"Indigenous Employees\",\n    \"Employees with Disabilities\"\n  )\n)\n\ntheme_zebra(export_table_2017)\n```\n\n:::\n\n```{r echo = FALSE, message=FALSE, warning=FALSE, include = FALSE}\n\n# Function to move data to long format for DI plotting\nformat_DI <- function(Year) {\n  assign(paste(\"di_df_long\", Year, sep = \"_\"), # create an object with year\n         \n         {\n           get(paste(\"di_df\", Year, sep = \"_\")) %>% # pull di_df_year df's\n             pivot_longer(cols = matches(c(\"per\", \"di\", \"chart\")),\n                          names_to = \"temp\",\n                          values_to = \"value\") %>% # reshape data so it's easier to deal with\n             mutate(\n               # separate into unit of measure\n               uom = case_when(\n                 grepl(pattern = \"^per\", x = as.character(temp)) ~ \"Percent\",\n                 grepl(pattern = \"^di\", x = as.character(temp)) ~ \"DI\",\n                 grepl(pattern = \"^chart\", x = as.character(temp)) ~ \"Chart\"\n               ),\n               # separate into subgroups\n               subgroup = case_when(\n                 grepl(pattern = \"all$\", x = temp) ~ \"All\",\n                 grepl(pattern = \"black$\", x = temp) ~ \"Black\",\n                 grepl(pattern = \"non_vm$\", x = temp) ~ \"Non Visible Minorities\",\n                 grepl(pattern = \"_vm$\", x = temp) ~ \"Visible Minorities\",\n                 grepl(pattern = \"indigenous$\", x = temp) ~ \"Indigenous\",\n                 grepl(pattern = \"pwd$\", x = temp) ~ \"Persons with disabilities\"\n               )\n             ) %>%\n             dplyr::select(\n               \"Salary range\" = range_group,\n               Value = value,\n               \"Unit of measure\" = uom,\n               Subgroup = subgroup\n             ) %>%\n             filter(`Salary range` != \"All ranges\") %>%\n             filter(Subgroup != \"All\") %>% # Remove \"all\" category entries\n             mutate(Subgroup = factor(\n               Subgroup,\n               levels = c(\n                 \"Non Visible Minorities\",\n                 \"Visible Minorities\",\n                 \"Persons with disabilities\",\n                 \"Indigenous\",\n                 \"Black\"\n               ),\n               labels = c(\n                 \"Non-Visible Minority Employees\",\n                 \"Visible Minority Employees\",\n                 \"Employees with Disabilities\",\n                 \"Indigenous Employees\",\n                 \"Black Employees\"\n               )\n             )) %>% filter(`Unit of measure` == \"DI\") %>% # Select only DI data\n             mutate(`Salary range` = factor(\n               `Salary range`,\n               levels = c(\n                 \"Less than $60,000\",\n                 \"$60,000 to $69,999\",\n                 \"$70,000 to $84,999\",\n                 \"$85,000 to $99,999\",\n                 \"Over $100,000K\",\n                 \"Less than $55,000\",\n                 \"$55,000 to $64,999\",\n                 \"$65,000 to $79,999\",\n                 \"$80,000 to $94,999\",\n                 \"Over $95,000K\"\n               ),\n               labels = c(\n                 \"<60.0K\",\n                 \"60.0-69.9K\",\n                 \"70.0-84.9K\",\n                 \"85.0-99.9K\",\n                 \"100.0K+\",\n                 \"<55.0K\",\n                 \"55.0-64.9K\",\n                 \"65.0-79.9K\",\n                 \"80.0-94.9K\",\n                 \"95.0K+\"\n               )\n             )) %>%\n             mutate(\n               quintile = dplyr::recode(\n                 `Salary range`,\n                 \"<60.0K\" = \"Bottom 20th Percentile\",\n                 \"60.0-69.9K\" = \"20th to 40th Percentile\",\n                 \"70.0-84.9K\" = \"40th to 60th Percentile\",\n                 \"85.0-99.9K\" = \"60th to 80th Percentile\",\n                 \"100.0K+\" = \"Top 20th Percentile\",\n                 \"<55.0K\" = \"Bottom 20th Percentile\",\n                 \"55.0-64.9K\" = \"20th to 40th Percentile\",\n                 \"65.0-79.9K\" = \"40th to 60th Percentile\",\n                 \"80.0-94.9K\" = \"60th to 80th Percentile\",\n                 \"95.0K+\" = \"Top 20th Percentile\"\n               )\n             )\n           \n           \n         }, envir = globalenv())\n  \n}        \n\n\n\n# Apply to all years\nlapply(years, format_DI) %>% \n  bind_rows()\n\n# Load in Appending function\nAppendMe <- function(dfNames) {\n  do.call(rbind, lapply(dfNames, function(x) {\n    cbind(get(x), source = x)\n  }))\n}\n\n# Append salary data and keep a column with names\ndi_datasets <- AppendMe(paste(\"di_df_long\", years, sep = \"_\"))  %>%\n  mutate(\n    source = dplyr::recode(\n      source,\n      # Change id columns to years using factors\n      di_df_long_2022 = \"2022\",\n      di_df_long_2021 = \"2021\",\n      di_df_long_2020 = \"2020\",\n      di_df_long_2019 = \"2019\",\n      di_df_long_2018 = \"2018\",\n      di_df_long_2017 = \"2017\"\n    )\n  ) %>%\n  rename(year = source) # rename source column to year\n\n```\n\n## Plot 1: DI of all groups by salary range (2022)\n\nThe dotted line represents equitable representation (a DI of 1). It can been seen that Black employees are overrepresented at the lower salary ranges and underrepresented at higher ranges compared to the other groups. As can be seen by the \"Non-Visible Minority Employees\" bars, an equal DI across all salary ranges should be expected.\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 7.5}\n\n# Grab just 2022 data\nplot1_df <-  di_datasets %>% filter(year == \"2022\")\n\n# Make a vector with corresponding colors\ncolors = met.brewer(\"Johnson\", 5)\n\n# Bar plot showing salary ranges by group\nggplot(plot1_df, aes(fill = Subgroup,\n                            y = Value,\n                            x = `Salary range`)) +\n  geom_bar(position = 'dodge',\n           stat ='identity') +\n  theme_classic() +\n  xlab(\"Salary range\") +\n  ylab(\"Disproportionality Index\") +\n  geom_hline(yintercept = 1,\n             linetype = \"dashed\") +\n  scale_fill_manual(\n    values = colors) +\n  coord_cartesian(ylim = c(.5, 1.5)) +\n  theme(legend.position = \"top\",\n        legend.title=element_blank(),\n       text = element_text(size = 15),\n       legend.text = element_text(size = 12)) +\n  guides(fill = guide_legend(nrow=2, byrow=TRUE)) +\n  annotate(\"text\",\n           y = 1.02,\n            x= \"100.0K+\",\n            hjust = .2,\n            label = \"Overrepresented\") +\n  annotate(\"text\",\n           y = 0.98,\n            x= \"100.0K+\",\n            hjust = .2,\n            label = \"Underrepresented\")\n```\n\n## Plot 2: A direct comparison of DI in Black Employees vs. Non-Visible Minority Employees (2022)\n\nThis plot zooms in on our \"baseline\" group and compares it to the Black employee group, which appears to be the most affected by inequity. A steady decrease in representation with each increase in salary range is clearly visible for the Black employee group.\n\n```{r Plot 2, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}\n\n# Grab data \nplot2_df <-\n  di_datasets %>% filter(year == \"2022\" &\n                           Subgroup %in% c(\"Non-Visible Minority Employees\", \"Black Employees\"))\n\n# Set color palette \ncolors <- met.brewer(\"Johnson\", 5)[c(1,5)]\n\n# Plot 2 \nggplot(plot2_df) +\n  geom_bar(\n    stat = \"identity\",\n    position = \"dodge\",\n    aes(\n      x = Subgroup,\n      y = Value,\n      fill = Subgroup,\n      alpha = `Salary range`\n    )\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(colour = \"black\"),\n    text = element_text(size = 15),\n    legend.text = element_text(size = 12)\n  ) +\n  scale_fill_manual  (values = colors, ) +\n  labs(title = NULL,\n       x = NULL,\n       y = \"Disproportionality Index\",\n       fill = NULL) +\n  guides(fill = \"none\") +\n  geom_hline(yintercept = 1,\n             linetype = \"dashed\") +\n  annotate(\n    \"text\",\n    y = 1.02,\n    x = \"Black Employees\",\n    hjust = -.7,\n    label = \"Overrepresented\"\n  ) +\n  annotate(\n    \"text\",\n    y = 0.98,\n    x = \"Black Employees\",\n    hjust = -.7,\n    label = \"Underrepresented\"\n  )\n```\n\n## Plot 3: Interactive DI Visualization\n\nHere you can select years and groups to display. Click the drop down on the left to filter by year. Click each group's text under the subgroup heading on the right to remove and add data. Use your mouse to select a section to zoom into. You can also hover over each bars to see each individual data point. \n\n```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width = 10, fig.height = 10}\n# Wrap text on labels\nplot3_df <- di_datasets %>% mutate(quintile = recode(quintile,\n                 \"Bottom 20th Percentile\" = \"Bottom 20th\",\n                 \"20th to 40th Percentile\" = \"20th to 40th\",\n                 \"40th to 60th Percentile\" = \"40th to 60th\",\n                 \"60th to 80th Percentile\" = \"60th to 80th\",\n                 \"Top 20th Percentile\" = \"Top 20th\"))\n\n# Get shared data for use with crosstalk\ndata_shared <- SharedData$new(plot3_df)\n\n# Make a vector with corresponding colors\ncolors = met.brewer(\"Johnson\", 5)\n\n# great plotly barplot\nplot3 <- ggplotly(ggplot(data_shared, aes(fill = Subgroup,\n                            y = Value,\n                            x = quintile,\n                            text = paste0(\"Year: \", year,\n                          \"<br>\", # Create a new line in the tooltip\n                          \"DI: \", Value,\n                          \"<br>\",\n                          \"Subgroup: \", Subgroup,\n                          \"<br>\",\n                          \"Quintile: \", quintile))) +\n  geom_bar(position = 'dodge',\n           stat ='identity') +\n  theme_classic() +\n  xlab(\"Salary Percentile\") +\n  ylab(\"Disproportionality Index\") +\n  geom_hline(yintercept = 1,\n             linetype = \"dashed\") +\n  scale_fill_manual(\n    values = colors) +\n  coord_cartesian(ylim = c(.5, 1.5)) +\n  theme(legend.position = \"top\",\n        legend.title=element_blank(),\n       text = element_text(size = 15),\n       legend.text = element_text(size = 12),\n       axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)),\n  tooltip = \"text\")\n\n\n\nbscols(widths = c(2, NA), \n       filter_select(id = \"fsid\", \n                     label = \"Year\", \n                     sharedData = data_shared, \n                     group = ~year,\n                     multiple = FALSE), \n       plot3)\n\n```\n\n## Plot 4: Interactive Comparison Quintile Visualization\n\n```{r Plot 4, echo = FALSE, message = FALSE, warning = FALSE, fig.width = 10, fig.height = 7.5}\n\n# set color pallette \ncolors <- met.brewer(\"Johnson\", 5)[c(1,5)]\n\nplot4_df <- di_datasets %>% mutate(quintile = recode(quintile,\n                 \"Bottom 20th Percentile\" = \"Bottom 20th\",\n                 \"20th to 40th Percentile\" = \"20th to 40th\",\n                 \"40th to 60th Percentile\" = \"40th to 60th\",\n                 \"60th to 80th Percentile\" = \"60th to 80th\",\n                 \"Top 20th Percentile\" = \"Top 20th\")) %>% \n  filter(Subgroup %in% c(\"Non-Visible Minority Employees\", \"Black Employees\"))\n  \n\n# Bar plot showing salary ranges by group\nggplot(plot4_df) +\n  geom_bar(stat = \"identity\",\n           position = \"dodge\",\n           aes(x = year,\n               y = Value,\n               fill = Subgroup,\n               alpha = quintile)) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    axis.line = element_line(colour = \"black\"),\n    text = element_text(size = 15),\n    legend.text = element_text(size = 12)\n  ) +\n  scale_fill_manual(values = colors) +\n  labs(title = NULL,\n       x = \"Year\",\n       y = \"Disproportionality Index\") +\n  coord_cartesian(ylim = c(.5, 1.5)) +\n    geom_hline(yintercept = 1,\n             linetype = \"dashed\") +\n  guides(alpha=guide_legend(title=\"Salary Quintile\"), \n         fill = guide_legend(title = \"Group\"))\n\n\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Visualizations.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"cosmo","title":"Visualizations","editor":"visual"},"extensions":{"book":{"multiFile":true}}}}}